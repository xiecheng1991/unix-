part1: 虚拟内存的作用
	1. 每个进度都有自己独立虚拟内存对应到物理内存,避免多个进程之间的内存冲突
	2. 每个虚拟内存的页表除了物理地址以外还有一写特殊的比特位用来标识读写权限在内存访问方面提供了更好的安全性

part2: 内存的分配与回收
	1: 分配
		应用程序通过malloc申请的是虚拟内存,当cpu读写这块内存时发现并没有对应的物理内存cpu就会产生缺页中断,然后就会从用户态进入到内核态并调用对应的缺页中断处理函数申请对应的物理内存
	2: 内存回收
		当没有足够的内存给应用程序申请分配时就会触发内存分配
		2.1: 异步回收 如果异步回收后的空闲内存依旧跟不上应用程序分配的速度则会进入2.2 直接回收
		2.2: 直接回收 会阻塞进程 如果直接回收后的内存依旧不能满足应用程序的申请需求 则会进入2.3 oom机制
		2.3: oom机制 out of memory 操作系统就会根据一定的算法选择占用内存较高的进程然后释放内存
part3: 那些内存可以被回收
	1: 文件页 内核缓存的磁盘数据（Buffer）和内核缓存的文件数据（Cache）都叫作文件页
		1.1: 干净的文件页 直接释放
		1.2: 脏的文件页 在内存中还有数据未写入磁盘的 先写入磁盘再释放 所以涉及到磁盘i/o
		文件页备注: 内核为读取文件时，都会申请一个文件页，缓存磁盘内容 避免再次读取或者其他进程读取改文件时 再次触发i/o
	2. 匿名页 程序通过mmap分配的动态内存
		2.1 swap机制 先把这些内存写入磁盘中,然后提供给其他进程使用
		匿名页和mmap mmap的主要作用是申请一块虚拟内存映射到对应文件的文件页 这样就可以实现直接读取
part4: 回收内存带来的性能影响
	1: 如果是直接回收或者脏内存页 都会触发一次i/o 如果频繁的触发则会导致进程变慢
part4: 回收算法
	文件页和匿名页都是采用LRU算法优先回收不常访问的内存,也可以通过设置一个倾向来选择优先回收文件页还是匿名页
part5: 如何避免被oom掉
	1. 直接回收都无法获得足够内存的情况下就会触发oom机制 然后操作系统就会为每个可以被杀掉的进程进行打分,得分越高越优先被杀掉
	2. 进程oom得分
		2.1 进程已使用物理内存页数
		2.2 每个进程的 OOM 校准值 oom_score_adj。它是可以通过 /proc/[pid]/oom_score_adj 来配置的。我们可以在设置 -1000 到 1000 之间的任意一个数值，调整进程被 OOM Kill 的几率。
所以如果一个进程不想被oom掉就可以设置oom校准值为-1000 就像sshd进程不会被杀掉,否则我们再也登陆不进去了
